module {
  func @ADD ( %arg0 : memref <3x1440x1080xi32> , %arg1 : memref <3x1440x1080xi32>) -> memref <3x1440x1080xi32> {
  %0 = alloc () : memref <3x1440x1080xi32>
  %1 :3 = krnl . define_loops 3
  krnl . iterate ( %1 #0 , %1 #1 , %1 #2) with ( %1 #0 -> %arg2 = 0 to 3, %1 #1 -> %arg3 = 0 to 1440, %1 #2 -> %arg4 = 0 to 1080) {
    %2 = affine . load %arg0 [ %arg2 , %arg3 , %arg4 ] : memref <3x1440x1080xi32>
    %3 = affine . load %arg1 [ %arg2 , %arg3 , %arg4 ] : memref <3x1440x1080xi32>
    %4 = std . addi %2 , %3 : i32
    affine . store %4 , %0 [ %arg2 , %arg3 , %arg4 ] : memref <3x1440x1080xi32>
  }
  std . return %0 : memref <3x1440x1080xi32>
  }
  " krnl . entry_point "() { func = @ADD , numInputs = 2 : i32 , numOutputs = 1 : i32 } : () -> ()
}
